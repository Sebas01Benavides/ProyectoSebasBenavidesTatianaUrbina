package proyectoprogramacion.view;

import proyectoprogramacion.controller.Banco;
import proyectoprogramacion.controller.Cajero;
import proyectoprogramacion.model.Cliente;
import proyectoprogramacion.model.TipoCliente;
import proyectoprogramacion.util.JsonHandler;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import java.util.List;
import java.util.Random;
import javax.swing.Timer;
import proyectoprogramacion.model.ReporteCliente;

/**
 *Clase principal que representa la ventana de la simulación de fila de banco.
 * Aquí se genera la fila, se muestra en una tabla y se inicia la simulación.
 * 
 * @author Tatiana Urbina y Sebastian Benavides 
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    // Referencia al controlador Banco, que gestiona la lógica principal
    private Banco banco;
    
    private JTextField[] txtCajeros;

    // Modelo para manipular la tabla visual de clientes
    private DefaultTableModel modeloTabla;

    // Tabla para mostrar clientes
    private JTable tablaClientes;

     // Para generar números aleatorios para clientes (id, tipo, etc.)
    private Random random;
    
    private Timer timerSimulacion;

     
public VentanaPrincipal() {
    initComponents();
     // Inicializar la lógica
      banco = new Banco();
      random = new Random();
      txtCajeros = new JTextField[] {
            txtCajero1, txtCajero2, txtCajero3,
            txtCajero4, txtCajero5
        };
      // Aquí se asigna el modelo manualmente, que después conectaremos con la tabla visual
       modeloTabla = new DefaultTableModel(new String[]{"Nombre", "Prioridad", "# Ticket"}, 0);
       txtFila.setModel(modeloTabla);

        setLocationRelativeTo(null);
    }  
    private void generarClientesIniciales(int cantidad) {
        banco.reset();
        Cliente.resetIdTickets();
        for (int i = 0; i < cantidad; i++) {
            TipoCliente tipo = TipoCliente.getRandomTipoCliente();
            Cliente clienteNuevo = new Cliente(tipo);
            banco.addCliente(clienteNuevo);
        }
        actualizarTablaClientes();
    }
    
    public void actualizarTablaClientes() {
          modeloTabla.setRowCount(0); // Limpia la tabla
        int contador = 1; // Contador para nombres "Cliente 1", "Cliente 2", 
        for (Cliente cliente : banco.getClientesEnFila()) {
            modeloTabla.addRow(new Object[]{
                "Cliente " + contador,             // Columna 1 Nombre 
                cliente.getTipo().toString(),      // Columna 2 Prioridad
                cliente.getIdTicket()              // Columna 3 id Ticket
            });
            contador++;
        }
    }

    /**
     * Guarda la lista actual de clientes en un archivo JSON.
     * @param rutaArchivo ruta donde se guardará el archivo JSON.
     */
    public void guardarClientesAJSON(String rutaArchivo) {
        List<Cliente> clientes = banco.getClientesEnFila();

        try (FileWriter writer = new FileWriter(rutaArchivo)) {
            String json = JsonHandler.convertirClientesAJson(banco.getClientesEnFila());
            writer.write(json);
            JOptionPane.showMessageDialog(this, "Clientes guardados correctamente en JSON.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Carga clientes desde un archivo JSON y actualiza la tabla y lista interna.
     * @param rutaArchivo ruta del archivo JSON que contiene los clientes.
     */
    public void cargarClientesDesdeJSON(String rutaArchivo) {
        try (FileReader reader = new FileReader(rutaArchivo)) {
            banco.reset();
            List<Cliente> clientesDesdeJson = JsonHandler.convertirJsonAClientes(reader);
            for (Cliente c : clientesDesdeJson) {
                banco.addCliente(c);
            }
            actualizarTablaClientes();
            JOptionPane.showMessageDialog(this, "Clientes cargados desde JSON correctamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnIniciarSimulacion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFila = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReiniciarSimulacion = new javax.swing.JButton();
        btnMostrarReportes = new javax.swing.JButton();
        btnGuardarJson = new javax.swing.JButton();
        btnCargarlistaJson = new javax.swing.JButton();
        txtCajero1 = new javax.swing.JTextField();
        txtCajero2 = new javax.swing.JTextField();
        txtCajero3 = new javax.swing.JTextField();
        txtCajero4 = new javax.swing.JTextField();
        txtCajero5 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulacion fila de banco");

        jButton1.setText("Generar fila de clientes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnIniciarSimulacion.setText("Iniciar simulacion");
        btnIniciarSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarSimulacionActionPerformed(evt);
            }
        });

        txtFila.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Prioridad", "# Ticket"
            }
        ));
        jScrollPane1.setViewportView(txtFila);

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Clientes en fila");
        jLabel1.setToolTipText("");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        btnReiniciarSimulacion.setText("Reiniciar simulación");
        btnReiniciarSimulacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarSimulacionActionPerformed(evt);
            }
        });

        btnMostrarReportes.setText("Mostrar Reportes");
        btnMostrarReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarReportesActionPerformed(evt);
            }
        });

        btnGuardarJson.setText("Guardar lista JSON");
        btnGuardarJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarJsonActionPerformed(evt);
            }
        });

        btnCargarlistaJson.setText("Cargar lista desde Json");
        btnCargarlistaJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarlistaJsonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Cajeros");
        jLabel2.setToolTipText("");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtCajero1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                        .addComponent(txtCajero2)
                        .addComponent(txtCajero3)
                        .addComponent(txtCajero4)
                        .addComponent(txtCajero5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(btnIniciarSimulacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReiniciarSimulacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMostrarReportes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardarJson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCargarlistaJson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIniciarSimulacion, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReiniciarSimulacion, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMostrarReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardarJson, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargarlistaJson, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCajero1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCajero2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCajero3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCajero4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCajero5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(208, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      // Genera cliente aleatorio y lo agrega a la fila
        generarClientesIniciales(25);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnIniciarSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarSimulacionActionPerformed
     if (timerSimulacion != null && timerSimulacion.isRunning()) {
        JOptionPane.showMessageDialog(this, "La simulación ya está corriendo.");
        return;
    }

    // Generar 25 clientes al iniciar la simulación
    generarClientesIniciales(25);

    banco.inicializarCajeros(); // crea 5 cajeros
    List<Cajero> cajeros = banco.getListaCajeros();

    for (int i = 0; i < cajeros.size(); i++) {
        Cajero cajero = cajeros.get(i);
        final int index = i; // para usar dentro del listener
        cajero.setEstadoCajeroListener((nombreCajero, estado, cliente) -> {
            SwingUtilities.invokeLater(() -> {
                String texto;
                if (cliente != null) {
                    texto = nombreCajero + ": Atendiendo cliente " + cliente.getIdTicket();
                } else {
                    texto = nombreCajero + ": " + estado;
                }
                txtCajeros[index].setText(texto);

                actualizarTablaClientes();
            });
        });
        cajero.startCajero();
    }

    timerSimulacion = new Timer(1000, e -> {
        for (Cajero cajero : cajeros) {
            cajero.avanzarMinutoSimulacion(1);
        }
        // Actualizar tiempos y remover clientes intolerantes
        List<ReporteCliente> clientesQueSeFueron = banco.actualizarTiemposEsperaYTolerancia(1);
        
        // Actualizar tabla en el hilo de Swing
        SwingUtilities.invokeLater(() -> {
            actualizarTablaClientes();
        });
    });
    timerSimulacion.start();
    }//GEN-LAST:event_btnIniciarSimulacionActionPerformed

    private void btnReiniciarSimulacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarSimulacionActionPerformed
        if (timerSimulacion != null && timerSimulacion.isRunning()) {
        timerSimulacion.stop();  // Detener timer si está corriendo
        }
        banco.reset();
        Cliente.resetIdTickets(); // Reinicia contador de tickets global
        // Limpiar textos de cajeros
        for (JTextField txt : txtCajeros) {
            txt.setText("");
        }
    
    modeloTabla.setRowCount(0);
    JOptionPane.showMessageDialog(this, "Simulación reiniciada");
    }//GEN-LAST:event_btnReiniciarSimulacionActionPerformed

    private void btnMostrarReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarReportesActionPerformed
        // Resumen general
    StringBuilder reporte = new StringBuilder();
    reporte.append("Clientes atendidos: ").append(banco.getClientesAtendidos().size()).append("\n");
    reporte.append("Clientes no atendidos: ").append(banco.getClientesNoAtendidos().size()).append("\n");
    
    // Mostrar resumen en JOptionPane
    JOptionPane.showMessageDialog(this, reporte.toString(), "Reporte General", JOptionPane.INFORMATION_MESSAGE);
    
    // Mostrar detalles de cada cajero
    java.util.List<Cajero> cajeros = banco.getCajeros(); // <-- Asegúrate de tener este método
    ReporteCajeros dialogo = new ReporteCajeros(this, cajeros);
    dialogo.setVisible(true);
    }//GEN-LAST:event_btnMostrarReportesActionPerformed

    private void btnGuardarJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarJsonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int opcion = chooser.showSaveDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().getAbsolutePath();
            guardarClientesAJSON(ruta);
         }
    }//GEN-LAST:event_btnGuardarJsonActionPerformed

    private void btnCargarlistaJsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarlistaJsonActionPerformed
        // Elige archivo JSON para cargar clientes (dialogo abrir)
        JFileChooser chooser = new JFileChooser();
        int opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().getAbsolutePath();
            cargarClientesDesdeJSON(ruta);
        }
    }//GEN-LAST:event_btnCargarlistaJsonActionPerformed

    /**
     *  Método main para lanzar la aplicación.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
          try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        SwingUtilities.invokeLater(() -> {
            new VentanaPrincipal().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarlistaJson;
    private javax.swing.JButton btnGuardarJson;
    private javax.swing.JButton btnIniciarSimulacion;
    private javax.swing.JButton btnMostrarReportes;
    private javax.swing.JButton btnReiniciarSimulacion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCajero1;
    private javax.swing.JTextField txtCajero2;
    private javax.swing.JTextField txtCajero3;
    private javax.swing.JTextField txtCajero4;
    private javax.swing.JTextField txtCajero5;
    private javax.swing.JTable txtFila;
    // End of variables declaration//GEN-END:variables
}
